name: Test and deploy my app

on:
  push:
    paths:
      - "src/**"
      - ".github/workflows/**"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      NOTIFY: ".github/workflows/notify.sh"
      IMAGE: m4gapower/my_app

  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true


      - name: Prep notifier
        run: |
          chmod +x $NOTIFY
          "$NOTIFY" "Starting ${{ github.event.repository.name }} CI - Run number: (#$GITHUB_RUN_NUMBER) Commit: ${{ github.event.head_commit.message }}" "$SLACK_WEBHOOK"

      

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies for testing
        run: |
          "$NOTIFY" "Starting Step - Install dependencies for testing" "$SLACK_WEBHOOK"
          if python -m pip install --upgrade pip \
            && { [ -f requirements.txt ] && pip install -r requirements.txt || true; } \
            && pip install pytest flake8 jq; then
            "$NOTIFY" "Step - Install dependencies for testing ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Install dependencies for testing ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Lint (flake8 - fatal only)
        env:
          LINT_PATH: src/my_app
        run: |
          "$NOTIFY" "Starting Step - Lint (flake8: fatal-only) on $LINT_PATH" "$SLACK_WEBHOOK"
          # Fail only on fatal problems: SyntaxError (E9/E999), bad breaks (F7/F63), undefined names (F82)
          if flake8 "$LINT_PATH" --count --select=E9,F63,F7,F82 --show-source --statistics; then
            "$NOTIFY" "Step - Lint (flake8: fatal-only) ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Lint (flake8: fatal-only) ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi
          flake8 "$LINT_PATH" --count --exit-zero --statistics


      - name: Build Docker image
        run: |
          "$NOTIFY" "üê≥ Starting Step - Build Docker image" "$SLACK_WEBHOOK"
          if docker build -t "$IMAGE:latest" .; then
            "$NOTIFY" "Step - Build Docker image ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Build Docker image ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Run & Test container
        run: |
          "$NOTIFY" "üß™ Starting Step - Run & Test container" "$SLACK_WEBHOOK"
          docker run -d --rm -p 8000:8000 --name my_app_test "$IMAGE:latest"
          sleep 5
          if curl -fsS http://localhost:8000/ > /dev/null; then
            "$NOTIFY" "Step - Run & Test container ‚úÖ Success (responded on :8000)" "$SLACK_WEBHOOK"
            docker stop my_app_test
          else
            "$NOTIFY" "Step - Run & Test container ‚ùå Failed (no response on :8000)" "$SLACK_WEBHOOK"
            docker logs my_app_test || true
            docker stop my_app_test
            exit 1
          fi

      - name: Get latest Docker Hub tag
        id: hub
        run: |
          "$NOTIFY" "üîé Starting Step - Get latest Docker Hub tag" "$SLACK_WEBHOOK"
          LATEST=$(curl -s "https://hub.docker.com/v2/repositories/$IMAGE/tags/?page_size=1&ordering=last_updated" | jq -r '.results[0].name')
          if [ -n "$LATEST" ] && [ "$LATEST" != "null" ]; then
            echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
            "$NOTIFY" "Step - Get latest Docker Hub tag ‚úÖ Success (Latest: $LATEST)" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Get latest Docker Hub tag ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Tag image with new version
        run: |
          "$NOTIFY" "üè∑Ô∏è Starting Step - Tag image" "$SLACK_WEBHOOK"
          LATEST="${{ steps.hub.outputs.latest }}"
          if [[ "$LATEST" =~ ^[0-9]+$ ]]; then
            NEW_TAG=$((LATEST+1))
          else
            NEW_TAG="1"
          fi
          docker tag "$IMAGE:latest" "$IMAGE:$NEW_TAG"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_ENV"
          "$NOTIFY" "Step - Tag image ‚úÖ Success (New: $NEW_TAG)" "$SLACK_WEBHOOK"

      - name: Push image(s)
        run: |
          "$NOTIFY" "üì§ Starting Step - Push image(s)" "$SLACK_WEBHOOK"
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          if docker push "$IMAGE:latest" && docker push "$IMAGE:${{ env.new_tag }}"; then
            "$NOTIFY" "Step - Push image(s) ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Push image(s) ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Install yq
        run: |
          "$NOTIFY" "Starting Step - Install yq" "$SLACK_WEBHOOK"
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          if yq --version; then
            "$NOTIFY" "Step - Install yq ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Install yq ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Bump image tag in deployment.yaml
        run: |
          DEPLOYFILE="/Deployment/my-app-deployment.yaml"
          "$NOTIFY" "Starting Step - Update $DEPLOYFILE" "$SLACK_WEBHOOK"
          yq -i '
            (.spec.template.spec.containers[] | select(.name=="my-app") | .image)
              = "'"$IMAGE"':" + env(new_tag)
          ' $DEPLOYFILE
          if grep -n "image:" $DEPLOYFILE; then
            "$NOTIFY" "Step - Update $DEPLOYFILE ‚úÖ Success ($IMAGE:${new_tag})" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Update $DEPLOYFILE ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Replace root index.html from src/
        run: |
          "$NOTIFY" "Starting Step - Copy src/index.html ‚Üí index.html" "$SLACK_WEBHOOK"
          if cp src/index.html index.html; then
            "$NOTIFY" "Step - Copy index.html ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Copy index.html ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Commit & push manifest changes (single step with notify)
        run: |
          "$NOTIFY" "Starting Step - Commit & push repo changes" "$SLACK_WEBHOOK"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add deployment.yaml index.html
          if git diff --cached --quiet; then
            "$NOTIFY" "Step - Commit & push ‚úÖ No changes to commit" "$SLACK_WEBHOOK"
            exit 0
          fi
          if git commit -m "chore(ci): bump image to ${IMAGE}:${{ env.new_tag }} & update index.html" && git push; then
            "$NOTIFY" "Step - Commit & push ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Commit & push ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Final pipeline result
        if: success()
        run: |
          $NOTIFY "üöÄ Pipeline completed successfully!" $SLACK_WEBHOOK

      - name: Final pipeline failure
        if: failure()
        run: |
          $NOTIFY "üî• Pipeline failed!" $SLACK_WEBHOOK